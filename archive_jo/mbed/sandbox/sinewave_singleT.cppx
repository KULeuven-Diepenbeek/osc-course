#include "mbed.h"

AnalogOut sine_output(PA_4);
AnalogOut saw_output(PA_5);

DigitalIn mypin(USER_BUTTON);

#define PI        (3.141592653589793238462)
#define AMPLITUDE (1.0)    // x * 3.3V
#define PHASE     (PI * 1) // 2*pi is one period
#define RANGE     (0x7FFF)
#define BUFFER_SIZE (360)

uint16_t buffer_sine[BUFFER_SIZE];
uint16_t buffer_saw[BUFFER_SIZE];
uint16_t offset = 0x7FFF;

void calculate_sinewave(void);
void calculate_sawwave(void);

int main() {
  int count=1, interval=1, a=0, b=0;
  int i;

  if(mypin.is_connected()) {
    printf("mypin is connected and initialized\r\n");
  }

  printf("Sinewave example\r\n");
  printf("Sawwave example\r\n");

  calculate_sinewave();
  calculate_sawwave();

  while(1) {
    b = a;
    a = 1-mypin.read();
    if (a==1 && b==0) {
      count++;
      if(count == 4) {
        count = 1;
      }
      printf("I'm going to increase the count variable to %d\r\n", count);
    } 
    for (i = 0; i < BUFFER_SIZE; i++) {
      sine_output.write_u16(buffer_sine[i]*count/3);
      saw_output.write_u16(buffer_saw[i]*count/3);
      wait_us(64/interval);
    }  
  }
}

void calculate_sinewave(void){
  int i;
  double rads;
  for (i = 0; i < BUFFER_SIZE; i++) {
    rads = (PI * i)/180.0; // Convert degree in radian
    buffer_sine[i] = (uint16_t)(AMPLITUDE * (RANGE * (cos(rads + PHASE))) + offset);
  }
}

void calculate_sawwave(void){
  int i;
  for (i = 0; i < BUFFER_SIZE; i++) {
    buffer_saw[i] = (uint16_t)(AMPLITUDE * (RANGE * (i%180)/180) + offset);
  }
}
