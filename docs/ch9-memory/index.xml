<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>9: Memory Management on Operating Systems and C</title>
    <link>https://kuleuven-diepenbeek.github.io/osc-course/ch9-memory/</link>
    <description>Recent content in 9: Memory Management on Operating Systems and C</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-uk</language>
    <managingEditor>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld and Jo Vliegen)</managingEditor>
    <webMaster>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld and Jo Vliegen)</webMaster><atom:link href="https://kuleuven-diepenbeek.github.io/osc-course/ch9-memory/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>9.1: Memory management</title>
      <link>https://kuleuven-diepenbeek.github.io/osc-course/ch9-memory/memory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld and Jo Vliegen)</author>
      <guid>https://kuleuven-diepenbeek.github.io/osc-course/ch9-memory/memory/</guid>
      <description>At multiple times we referred to the registers in processor. These 16 (or at least in that order of magnitude) registers don&amp;rsquo;t suffice to run the complex tasks that are running on our devices. More space is needed !!!
What good is additional space is you can&amp;rsquo;t access it ? As we do in real life we give every house an address. This provides an unambiguous way of addressing ðŸ˜‰ every single house.</description>
    </item>
    
    <item>
      <title>9.2: Deliberate Segfaulting</title>
      <link>https://kuleuven-diepenbeek.github.io/osc-course/ch9-memory/lab1_segfault/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld and Jo Vliegen)</author>
      <guid>https://kuleuven-diepenbeek.github.io/osc-course/ch9-memory/lab1_segfault/</guid>
      <description>source: xkcd.com   X A to the Z  Run the program below and verify that it runs without errors
#include &amp;lt;stdio.h&amp;gt; #define WRITE_SIZE 26 #define READ_SIZE 27  int main(void) { int i; unsigned char alphabet[26]; for(i=0;i&amp;lt;WRITE_SIZE;i++) { alphabet[i] = 65 + i; } for(i=0;i&amp;lt;READ_SIZE;i++) { printf(&amp;#34;%2d -&amp;gt; %c (%02x)\n&amp;#34;, i, alphabet[i], alphabet[i]); } return 0; } Recompile the code above, but verify that you have the -0s option added.</description>
    </item>
    
    <item>
      <title>9.3: Paging</title>
      <link>https://kuleuven-diepenbeek.github.io/osc-course/ch9-memory/paging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld and Jo Vliegen)</author>
      <guid>https://kuleuven-diepenbeek.github.io/osc-course/ch9-memory/paging/</guid>
      <description>A memory management technique that is used both in Linux and all other main operating systems is paging. The core of the concept is similar to segmentation: The main memory is divided into pieces. These pieces are mapped to the hardware and give the programmer the illusion of having a continuous memory space. However, internally these pieces might be spread all over the hardware.
With segmentation there might be the following issue: we need to allocate a segment of 1024 bytes.</description>
    </item>
    
    <item>
      <title>9.4: Simply browsing through pages</title>
      <link>https://kuleuven-diepenbeek.github.io/osc-course/ch9-memory/lab2_browsing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld and Jo Vliegen)</author>
      <guid>https://kuleuven-diepenbeek.github.io/osc-course/ch9-memory/lab2_browsing/</guid>
      <description>image source: wikipedia.com    Get page size on the Linux system in the Virtual Box through a C program   An example output  
 Assume a system with a 32-bit logical addresses and a 4-kB page size. Write a C program that is passed a logical address (in decimal) through command line arguments. Print the page number and the offset for the given address.</description>
    </item>
    
  </channel>
</rss>
