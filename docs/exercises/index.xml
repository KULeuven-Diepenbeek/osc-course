<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>A. Exercises Assignments on Operating Systems and C</title>
    <link>https://kuleuven-diepenbeek.github.io/osc-course/exercises/</link>
    <description>Recent content in A. Exercises Assignments on Operating Systems and C</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-uk</language>
    <managingEditor>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld and Jo Vliegen)</managingEditor>
    <webMaster>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld and Jo Vliegen)</webMaster><atom:link href="https://kuleuven-diepenbeek.github.io/osc-course/exercises/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1. Integrated C exercise</title>
      <link>https://kuleuven-diepenbeek.github.io/osc-course/exercises/c-integrated-ex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld and Jo Vliegen)</author>
      <guid>https://kuleuven-diepenbeek.github.io/osc-course/exercises/c-integrated-ex/</guid>
      <description>Download the start project here: c-integrated-start.c.
The following functions are given:
 showList() prints the values of a list (no need to modify this) clearList() clears objects and frees memory (no need to modify this) createRandomNode() creates a new object with a random value createListOfItems() creates a list of x random objects main() bootstraps everything.  1. Commandline compiling Create a simplified Makefile which does the following when executing the command make:</description>
    </item>
    
    <item>
      <title>2. Testing in C(&#43;&#43;)</title>
      <link>https://kuleuven-diepenbeek.github.io/osc-course/exercises/c-debugging-testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld and Jo Vliegen)</author>
      <guid>https://kuleuven-diepenbeek.github.io/osc-course/exercises/c-debugging-testing/</guid>
      <description>Download the start project here: cpp-testing.cpp. Remember that in order to run this as a Google Test Suite, you need to compile it using g++ and bootstrap GTest in a separate .cpp file where the main() function resides. Go back to the lab notes if you&amp;rsquo;re not sure how to pull this off.
The following code is given:
 date and period structs to represent a date and a period of dates in code.</description>
    </item>
    
    <item>
      <title>3. Inter-thread communication</title>
      <link>https://kuleuven-diepenbeek.github.io/osc-course/exercises/tasks_inter_thread_communication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld and Jo Vliegen)</author>
      <guid>https://kuleuven-diepenbeek.github.io/osc-course/exercises/tasks_inter_thread_communication/</guid>
      <description>Analyse exercise 6_4_3.c (shown below) and write a report (&amp;lt; 3 pages):  describe what the program does make a chart that plots &amp;lsquo;the elapsed real time&amp;rsquo; the program consumes in function of the number of &amp;lsquo;the number of threads that are contributing&amp;rsquo;  the scale on the X-axis goes from 2 to 300 at least 8 data points should be present in the chart TIP the command time  interpret the chart   hand in the report</description>
    </item>
    
    <item>
      <title>4. Pseudo scheduler</title>
      <link>https://kuleuven-diepenbeek.github.io/osc-course/exercises/scheduler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Wouter Groeneveld and Jo Vliegen)</author>
      <guid>https://kuleuven-diepenbeek.github.io/osc-course/exercises/scheduler/</guid>
      <description>image source: youtube.com   Scheduler In this assignment you&amp;rsquo;re going to build a (pseudo) scheduler. A number of tasks will be provided. The scheduler follows the next rules to schedule the presented tasks:
 The scheduler is preemtive and uses a round-robin approach without priorities. The (virtual) time slice is 1 second. If a new job is announcing itself, it gets a time slice right away (last come, first served)  Circular Linked List As should be clear from the theory, the (pseudo) scheduler will need to store the incoming.</description>
    </item>
    
  </channel>
</rss>
